# Generated from patito.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,225,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
        11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
        29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,5,30,183,8,30,10,30,12,30,
        186,9,30,1,31,3,31,189,8,31,1,31,4,31,192,8,31,11,31,12,31,193,1,
        31,1,31,4,31,198,8,31,11,31,12,31,199,1,32,3,32,203,8,32,1,32,4,
        32,206,8,32,11,32,12,32,207,1,33,1,33,5,33,212,8,33,10,33,12,33,
        215,9,33,1,33,1,33,1,34,4,34,220,8,34,11,34,12,34,221,1,34,1,34,
        0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,1,0,5,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,232,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,
        1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,9,79,1,0,0,0,11,81,1,0,0,0,13,
        83,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,92,1,0,0,
        0,23,95,1,0,0,0,25,98,1,0,0,0,27,101,1,0,0,0,29,103,1,0,0,0,31,105,
        1,0,0,0,33,107,1,0,0,0,35,109,1,0,0,0,37,111,1,0,0,0,39,120,1,0,
        0,0,41,125,1,0,0,0,43,130,1,0,0,0,45,137,1,0,0,0,47,141,1,0,0,0,
        49,149,1,0,0,0,51,158,1,0,0,0,53,162,1,0,0,0,55,165,1,0,0,0,57,170,
        1,0,0,0,59,174,1,0,0,0,61,180,1,0,0,0,63,188,1,0,0,0,65,202,1,0,
        0,0,67,209,1,0,0,0,69,219,1,0,0,0,71,72,5,59,0,0,72,2,1,0,0,0,73,
        74,5,44,0,0,74,4,1,0,0,0,75,76,5,58,0,0,76,6,1,0,0,0,77,78,5,40,
        0,0,78,8,1,0,0,0,79,80,5,41,0,0,80,10,1,0,0,0,81,82,5,123,0,0,82,
        12,1,0,0,0,83,84,5,125,0,0,84,14,1,0,0,0,85,86,5,62,0,0,86,16,1,
        0,0,0,87,88,5,60,0,0,88,18,1,0,0,0,89,90,5,62,0,0,90,91,5,61,0,0,
        91,20,1,0,0,0,92,93,5,60,0,0,93,94,5,61,0,0,94,22,1,0,0,0,95,96,
        5,61,0,0,96,97,5,61,0,0,97,24,1,0,0,0,98,99,5,33,0,0,99,100,5,61,
        0,0,100,26,1,0,0,0,101,102,5,43,0,0,102,28,1,0,0,0,103,104,5,45,
        0,0,104,30,1,0,0,0,105,106,5,42,0,0,106,32,1,0,0,0,107,108,5,47,
        0,0,108,34,1,0,0,0,109,110,5,61,0,0,110,36,1,0,0,0,111,112,5,80,
        0,0,112,113,5,114,0,0,113,114,5,111,0,0,114,115,5,103,0,0,115,116,
        5,114,0,0,116,117,5,97,0,0,117,118,5,109,0,0,118,119,5,97,0,0,119,
        38,1,0,0,0,120,121,5,86,0,0,121,122,5,97,0,0,122,123,5,114,0,0,123,
        124,5,115,0,0,124,40,1,0,0,0,125,126,5,78,0,0,126,127,5,117,0,0,
        127,128,5,108,0,0,128,129,5,97,0,0,129,42,1,0,0,0,130,131,5,73,0,
        0,131,132,5,110,0,0,132,133,5,105,0,0,133,134,5,99,0,0,134,135,5,
        105,0,0,135,136,5,111,0,0,136,44,1,0,0,0,137,138,5,70,0,0,138,139,
        5,105,0,0,139,140,5,110,0,0,140,46,1,0,0,0,141,142,5,69,0,0,142,
        143,5,115,0,0,143,144,5,99,0,0,144,145,5,114,0,0,145,146,5,105,0,
        0,146,147,5,98,0,0,147,148,5,101,0,0,148,48,1,0,0,0,149,150,5,77,
        0,0,150,151,5,105,0,0,151,152,5,101,0,0,152,153,5,110,0,0,153,154,
        5,116,0,0,154,155,5,114,0,0,155,156,5,97,0,0,156,157,5,115,0,0,157,
        50,1,0,0,0,158,159,5,72,0,0,159,160,5,97,0,0,160,161,5,122,0,0,161,
        52,1,0,0,0,162,163,5,83,0,0,163,164,5,105,0,0,164,54,1,0,0,0,165,
        166,5,83,0,0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,111,0,
        0,169,56,1,0,0,0,170,171,5,105,0,0,171,172,5,110,0,0,172,173,5,116,
        0,0,173,58,1,0,0,0,174,175,5,102,0,0,175,176,5,108,0,0,176,177,5,
        111,0,0,177,178,5,97,0,0,178,179,5,116,0,0,179,60,1,0,0,0,180,184,
        7,0,0,0,181,183,7,1,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,62,1,0,0,0,186,184,1,0,0,0,187,189,5,
        45,0,0,188,187,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,192,7,
        2,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,
        0,0,0,194,195,1,0,0,0,195,197,5,46,0,0,196,198,7,2,0,0,197,196,1,
        0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,64,1,0,
        0,0,201,203,5,45,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,205,1,0,
        0,0,204,206,7,2,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,
        0,0,207,208,1,0,0,0,208,66,1,0,0,0,209,213,5,34,0,0,210,212,8,3,
        0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,
        0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,34,0,0,217,68,1,0,
        0,0,218,220,7,4,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,0,
        0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,6,34,0,0,224,70,1,0,
        0,0,9,0,184,188,193,199,202,207,213,221,1,6,0,0
    ]

class patitoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    PROGRAMA = 19
    VARS = 20
    NULA = 21
    INICIO = 22
    FIN = 23
    ESCRIBE = 24
    MIENTRAS = 25
    HAZ = 26
    SI = 27
    SINO = 28
    INT_TOK = 29
    FLOAT_TOK = 30
    ID = 31
    CTE_FLOT = 32
    CTE_ENT = 33
    LETRERO = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "':'", "'('", "')'", "'{'", "'}'", "'>'", "'<'", 
            "'>='", "'<='", "'=='", "'!='", "'+'", "'-'", "'*'", "'/'", 
            "'='", "'Programa'", "'Vars'", "'Nula'", "'Inicio'", "'Fin'", 
            "'Escribe'", "'Mientras'", "'Haz'", "'Si'", "'Sino'", "'int'", 
            "'float'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAMA", "VARS", "NULA", "INICIO", "FIN", "ESCRIBE", "MIENTRAS", 
            "HAZ", "SI", "SINO", "INT_TOK", "FLOAT_TOK", "ID", "CTE_FLOT", 
            "CTE_ENT", "LETRERO", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "PROGRAMA", "VARS", 
                  "NULA", "INICIO", "FIN", "ESCRIBE", "MIENTRAS", "HAZ", 
                  "SI", "SINO", "INT_TOK", "FLOAT_TOK", "ID", "CTE_FLOT", 
                  "CTE_ENT", "LETRERO", "WS" ]

    grammarFileName = "patito.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


